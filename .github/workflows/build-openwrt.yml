#
#
# 感谢p3terx大神的一键编译脚本
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/P3TERX/Actions-OpenWrt.git>
#


name: 编译OpenWrt固件

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH远程'
        required: true
        default: 'ssh-actions'


#定时触发开始编译(开启定时编译请先确认SSH处在关闭状态,要不然SSH没人管,会卡SSH编译失败)
#  schedule:
#    - cron: 0 8 */5 * *


env: 
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  TZ: Asia/Shanghai

jobs: 
  build:
    runs-on: Ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译 ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_x86_64]
        
       # [Lede_x86_64]      

    steps:
    - name: 准备结束
      uses: actions/checkout@v2
    
    - name: 检测脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "WXFB_MESSAGE=${WXFB_MESSAGE}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${DIY_P1_SH}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${DIY_P2_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
    
    - name: 微信通知
      uses: emon100/Action-Serverchan@v2
      if: env.SERVERCHAN_SCKEY == 'true' || (github.event.inputs.wxtz == 'wxtz' && github.event.inputs.wxtz  != 'false')
      with:
        SCKEY: ${{ secrets.SCKEY }}
        text: 主人${{matrix.target}}编译开始啦
        desp: 主人您要编译的[${{ matrix.target }}]固件正在努力耕耘中,请耐心等待......
    
    - name: 开始安装编译所需系统
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
                
    - name: 下载固件源码
      working-directory: /workdir
      run: |
        git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 加载源和DIY1
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    
    - name: 更新
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装
      run: cd openwrt && ./scripts/feeds install -a
      
    - name: 加载设置、DIY2
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: SSH远程连接（运行到此必须刷新一次网页再等待代码展开,不能频繁刷新）
      uses: garypang13/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh' && github.event.inputs.ssh  != 'false')

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"
        echo "date=$(date "+%Y-%m-%d %H.%M")" >> $GITHUB_ENV
        echo "date1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV
        echo "date2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
        
    - name: 上传bin文件夹(固件+ipk)在github空间
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{matrix.target}}_${{ env.date }}
        path: openwrt/bin

    - name: 整理固件文件夹
      id: organizer
      run: |
        mkdir config
        find openwrt/bin/targets/ -name "*config.buildinfo*" | xargs -i mv -f {} config
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*buildinfo*" | xargs -i mv -f {} packages
        find -name "*sha256sums*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*kernel1.bin*" | xargs -i mv -f {} packages
        find -name "*manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*vmdk*" | xargs -i mv -f {} packages
        find -name "*Image*" | xargs -i mv -f {} packages
        find -name "*rootfs-squashfs*" | xargs -i mv -f {} packages
        find -name "*squashfs-rootfs*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    
    - name: 上传.config配置文件在github空间
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_CONFIG == 'true'
      with:
        name: .config_${{matrix.target}}_${{ env.date }}
        path: ./config

    - name: 上传固件在github空间
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware_${{matrix.target}}_${{ env.date }}
        path: ${{ env.FIRMWARE }}
        
    
    - name: 微信通知
      uses: emon100/Action-Serverchan@v2
      if: steps.organizer.outputs.status == 'success' && env.SERVERCHAN_SCKEY == 'true' || (github.event.inputs.wxtz == 'wxtz' && github.event.inputs.wxtz  != 'false')
      with:
        SCKEY: ${{ secrets.SCKEY }}
        text: 恭喜主人${{matrix.target}}固件编译成功！
        desp: 我亲爱的主人您要编译的${{ matrix.target }}固件成功编译完成了！
